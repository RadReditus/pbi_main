// –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã —Ä—É—Å—Å–∫–∏—Ö –Ω–∞–∑–≤–∞–Ω–∏–π
const { RussianNamesMapperService } = require('./src/mssql/russian-names-mapper.service');

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
const mapper = new RussianNamesMapperService();

console.log('üéØ –ü—Ä–∏–º–µ—Ä—ã –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏–π\n');

// –ü—Ä–∏–º–µ—Ä—ã —Ç–∞–±–ª–∏—Ü
console.log('üìã –¢–ê–ë–õ–ò–¶–´:');
const tables = ['_Reference175', '_Reference176', '_Document224', '_AccumRg10180'];
tables.forEach(table => {
  const mapping = mapper.getTableMapping(table);
  console.log(`${mapping.technical} ‚Üí ${mapping.russian} (${mapping.postgres})`);
});

console.log('\nüîß –ü–û–õ–Ø:');
const fields = ['_IDRRef', '_Code', '_Description', '_Fld3405RRef', '_Fld14168RRef'];
fields.forEach(field => {
  const mapping = mapper.getFieldMapping(field);
  console.log(`${mapping.technical} ‚Üí ${mapping.russian} (${mapping.postgres})`);
});

console.log('\nüìä –ü–†–ò–ú–ï–† –ó–ê–ü–ò–°–ò:');
const exampleRecord = {
  '_IDRRef': '0x1234567890ABCDEF',
  '_Code': '000000001',
  '_Description': '–¢–æ–≤–∞—Ä 1',
  '_Fld3405RRef': '0x9876543210FEDCBA',
  '_Fld3406RRef': '0x1111111111111111'
};

console.log('–î–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è:');
console.log(JSON.stringify(exampleRecord, null, 2));

console.log('\n–ü–æ—Å–ª–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è:');
const convertedRecord = {};
for (const [key, value] of Object.entries(exampleRecord)) {
  const russianFieldName = mapper.getPostgresFieldName(key);
  convertedRecord[russianFieldName] = value;
}
console.log(JSON.stringify(convertedRecord, null, 2));

console.log('\nüóÇÔ∏è SQL –ó–ê–ü–†–û–°:');
console.log('-- –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã');
console.log('CREATE TABLE "–Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞" (');
console.log('  "–∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä" BYTEA NOT NULL,');
console.log('  "–∫–æ–¥" NUMERIC NOT NULL,');
console.log('  "–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ" VARCHAR NOT NULL,');
console.log('  "–µ–¥–∏–Ω–∏—Ü–∞_–∏–∑–º–µ—Ä–µ–Ω–∏—è" BYTEA,');
console.log('  "–≥—Ä—É–ø–ø–∞_—Ç–æ–≤–∞—Ä–æ–≤" BYTEA');
console.log(');');
console.log('');
console.log('-- –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏');
console.log('COMMENT ON TABLE "–Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞" IS \'–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞\';');
console.log('COMMENT ON COLUMN "–Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞"."–∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä" IS \'–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä\';');
console.log('COMMENT ON COLUMN "–Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞"."–∫–æ–¥" IS \'–ö–æ–¥\';');
console.log('COMMENT ON COLUMN "–Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞"."–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ" IS \'–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ\';');

console.log('\n‚úÖ –°–∏—Å—Ç–µ–º–∞ —Ä—É—Å—Å–∫–∏—Ö –Ω–∞–∑–≤–∞–Ω–∏–π –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!');
