// –¢–µ—Å—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü —Å hex ID –∏ –∫–∏—Ä–∏–ª–ª–∏—Ü–µ–π
const { Client } = require('pg');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL
const postgresConfig = {
  host: process.env.PG_HOST || 'localhost',
  port: process.env.PG_PORT || 5432,
  user: process.env.PG_USER || 'postgres',
  password: process.env.PG_PASSWORD || 'password',
  database: 'rts_decaux_reklama',
};

// –¢–∞–±–ª–∏—Ü—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å hex ID
const targetTables = [
  '–æ—Å—Ç–∞—Ç–∫–∏_—Ç–æ–≤–∞—Ä–æ–≤', // _AccumRg10332
  '—Ç–æ–≤–∞—Ä—ã_–Ω–∞_—Å–∫–ª–∞–¥–∞—Ö', // _AccumRg10180
  '–¥–≤–∏–∂–µ–Ω–∏—è_—Ç–æ–≤–∞—Ä–æ–≤', // _AccumRg10347
  '–ø—Ä–æ–¥–∞–∂–∏_—Ç–æ–≤–∞—Ä–æ–≤', // _AccumRg10367
  '–∑–∞–∫—É–ø–∫–∏_—Ç–æ–≤–∞—Ä–æ–≤', // _AccumRg10467
  '—Ü–µ–Ω—ã_—Ç–æ–≤–∞—Ä–æ–≤', // _InfoRg7798
  '—Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏_—Ç–æ–≤–∞—Ä–æ–≤', // _InfoRg7821
  '—Å–≤–æ–π—Å—Ç–≤–∞_—Ç–æ–≤–∞—Ä–æ–≤', // _InfoRg7825
];

async function testSpecificTables() {
  const client = new Client(postgresConfig);
  
  try {
    console.log('üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL...');
    await client.connect();
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é —Ü–µ–ª–µ–≤—É—é —Ç–∞–±–ª–∏—Ü—É
    for (const tableName of targetTables) {
      console.log(`\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü—ã: ${tableName}`);
      console.log('='.repeat(60));
      
      try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
        const existsResult = await client.query(`
          SELECT EXISTS (
            SELECT FROM information_schema.tables 
            WHERE table_schema = 'public' 
            AND table_name = '${tableName}'
          )
        `);
        
        if (!existsResult.rows[0].exists) {
          console.log(`‚ùå –¢–∞–±–ª–∏—Ü–∞ ${tableName} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
          continue;
        }
        
        console.log(`‚úÖ –¢–∞–±–ª–∏—Ü–∞ ${tableName} —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
        
        // –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã
        const columnsResult = await client.query(`
          SELECT 
            column_name,
            data_type,
            is_nullable,
            column_comment
          FROM information_schema.columns 
          WHERE table_name = '${tableName}'
          ORDER BY ordinal_position
        `);
        
        console.log(`üìä –°—Ç—Ä—É–∫—Ç—É—Ä–∞ (${columnsResult.rows.length} –∫–æ–ª–æ–Ω–æ–∫):`);
        columnsResult.rows.forEach(col => {
          console.log(`  ${col.column_name} (${col.data_type}) - ${col.column_comment || '–ë–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è'}`);
        });
        
        // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
        const countResult = await client.query(`SELECT COUNT(*) as count FROM "${tableName}"`);
        const recordCount = countResult.rows[0].count;
        console.log(`üìà –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: ${recordCount}`);
        
        if (recordCount > 0) {
          // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
          await analyzeTableData(client, tableName, columnsResult.rows);
        }
        
      } catch (error) {
        console.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–∞–±–ª–∏—Ü—ã ${tableName}: ${error.message}`);
      }
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error);
  } finally {
    await client.end();
    console.log('\nüîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å PostgreSQL –∑–∞–∫—Ä—ã—Ç–æ');
  }
}

async function analyzeTableData(client, tableName, columns) {
  console.log(`\nüîç –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü–µ ${tableName}:`);
  console.log('-'.repeat(50));
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 –∑–∞–ø–∏—Å–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    const dataResult = await client.query(`SELECT * FROM "${tableName}" LIMIT 10`);
    
    if (dataResult.rows.length === 0) {
      console.log('  üì≠ –¢–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞');
      return;
    }
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é –∫–æ–ª–æ–Ω–∫—É
    const columnAnalysis = {};
    
    columns.forEach(col => {
      columnAnalysis[col.column_name] = {
        totalValues: 0,
        hexIds: 0,
        cyrillic: 0,
        garbled: 0,
        examples: []
      };
    });
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
    dataResult.rows.forEach((row, rowIndex) => {
      Object.entries(row).forEach(([columnName, value]) => {
        if (value === null || value === undefined) return;
        
        const analysis = columnAnalysis[columnName];
        if (!analysis) return;
        
        analysis.totalValues++;
        
        if (typeof value === 'string') {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º hex ID
          if (/^0x[0-9A-Fa-f]{16}$/.test(value)) {
            analysis.hexIds++;
            if (analysis.examples.length < 3) {
              analysis.examples.push(value);
            }
          }
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∏—Ä–∏–ª–ª–∏—Ü—É
          if (/[–∞-—è—ë]/i.test(value)) {
            analysis.cyrillic++;
          }
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—Ä–∞–∫—É–ª–∏
          if (/[¬°¬ø]|Yn6|√¨√ß|b!!/.test(value)) {
            analysis.garbled++;
            if (analysis.examples.length < 3) {
              analysis.examples.push(value);
            }
          }
        }
      });
    });
    
    // –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
    Object.entries(columnAnalysis).forEach(([columnName, analysis]) => {
      if (analysis.totalValues === 0) return;
      
      console.log(`\n  üìä –ö–æ–ª–æ–Ω–∫–∞: ${columnName}`);
      console.log(`    –í—Å–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏–π: ${analysis.totalValues}`);
      
      if (analysis.hexIds > 0) {
        console.log(`    üî¢ Hex ID: ${analysis.hexIds} (${Math.round(analysis.hexIds / analysis.totalValues * 100)}%)`);
        console.log(`    –ü—Ä–∏–º–µ—Ä—ã: ${analysis.examples.join(', ')}`);
      }
      
      if (analysis.cyrillic > 0) {
        console.log(`    ‚úÖ –ö–∏—Ä–∏–ª–ª–∏—Ü–∞: ${analysis.cyrillic} (${Math.round(analysis.cyrillic / analysis.totalValues * 100)}%)`);
      }
      
      if (analysis.garbled > 0) {
        console.log(`    ‚ùå –ö–∞—Ä–∞–∫—É–ª–∏: ${analysis.garbled} (${Math.round(analysis.garbled / analysis.totalValues * 100)}%)`);
        console.log(`    –ü—Ä–∏–º–µ—Ä—ã: ${analysis.examples.join(', ')}`);
      }
    });
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –∑–∞–ø–∏—Å–µ–π
    console.log(`\nüìã –ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø–∏—Å–µ–π:`);
    dataResult.rows.slice(0, 3).forEach((row, index) => {
      console.log(`\n  –ó–∞–ø–∏—Å—å ${index + 1}:`);
      Object.entries(row).forEach(([key, value]) => {
        let status = '';
        if (typeof value === 'string') {
          if (/^0x[0-9A-Fa-f]{16}$/.test(value)) {
            status = 'üî¢ HEX ID';
          } else if (/[–∞-—è—ë]/i.test(value)) {
            status = '‚úÖ –ö–∏—Ä–∏–ª–ª–∏—Ü–∞';
          } else if (/[¬°¬ø]|Yn6|√¨√ß|b!!/.test(value)) {
            status = '‚ùå –ö–∞—Ä–∞–∫—É–ª–∏';
          } else {
            status = 'üìù –û–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç';
          }
        } else {
          status = 'üìä –î–∞–Ω–Ω—ã–µ';
        }
        
        console.log(`    ${key}: ${value} ${status}`);
      });
    });
    
  } catch (error) {
    console.log(`  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –¥–∞–Ω–Ω—ã—Ö: ${error.message}`);
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü PostgreSQL');
console.log('=============================================');
testSpecificTables().catch(console.error);
