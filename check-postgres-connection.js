// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL
const { Client } = require('pg');

const postgresConfig = {
  host: process.env.PG_HOST || 'localhost',
  port: process.env.PG_PORT || 5432,
  user: process.env.PG_USER || 'postgres',
  password: process.env.PG_PASSWORD || 'password',
  database: 'rts_decaux_reklama',
};

async function checkConnection() {
  const client = new Client(postgresConfig);
  
  try {
    console.log('üîå –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL...');
    console.log(`üì° –•–æ—Å—Ç: ${postgresConfig.host}:${postgresConfig.port}`);
    console.log(`üóÑÔ∏è  –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: ${postgresConfig.database}`);
    console.log(`üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${postgresConfig.user}`);
    
    const startTime = Date.now();
    await client.connect();
    const endTime = Date.now();
    
    console.log(`‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ! (${endTime - startTime}ms)`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Å–∏—é PostgreSQL
    const versionResult = await client.query('SELECT version()');
    console.log(`üìä –í–µ—Ä—Å–∏—è PostgreSQL: ${versionResult.rows[0].version.split(' ')[0]}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    const dbResult = await client.query(`
      SELECT datname 
      FROM pg_database 
      WHERE datistemplate = false
      ORDER BY datname
    `);
    
    console.log(`üóÑÔ∏è  –î–æ—Å—Ç—É–ø–Ω—ã–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: ${dbResult.rows.map(r => r.datname).join(', ')}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—ã –≤ –Ω–∞—à–µ–π –±–∞–∑–µ
    const tablesResult = await client.query(`
      SELECT table_name 
      FROM information_schema.tables 
      WHERE table_schema = 'public' 
      AND table_type = 'BASE TABLE'
      ORDER BY table_name
    `);
    
    console.log(`üìã –¢–∞–±–ª–∏—Ü –≤ –±–∞–∑–µ ${postgresConfig.database}: ${tablesResult.rows.length}`);
    
    if (tablesResult.rows.length > 0) {
      console.log(`üìù –¢–∞–±–ª–∏—Ü—ã: ${tablesResult.rows.map(r => r.table_name).join(', ')}`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—É—é —Ç–∞–±–ª–∏—Ü—É
      const firstTable = tablesResult.rows[0].table_name;
      const countResult = await client.query(`SELECT COUNT(*) as count FROM "${firstTable}"`);
      const count = countResult.rows[0].count;
      console.log(`üìä –ó–∞–ø–∏—Å–µ–π –≤ ${firstTable}: ${count}`);
    }
    
    console.log('\nüéâ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL:');
    console.error(`   –°–æ–æ–±—â–µ–Ω–∏–µ: ${error.message}`);
    console.error(`   –ö–æ–¥: ${error.code}`);
    
    if (error.code === 'ECONNREFUSED') {
      console.error('   üí° –í–æ–∑–º–æ–∂–Ω–æ, PostgreSQL –Ω–µ –∑–∞–ø—É—â–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
    } else if (error.code === 'ENOTFOUND') {
      console.error('   üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Ö–æ—Å—Ç–∞');
    } else if (error.code === '28P01') {
      console.error('   üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –ª–æ–≥–∏–Ω–∞ –∏ –ø–∞—Ä–æ–ª—è');
    } else if (error.code === '3D000') {
      console.error('   üí° –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
    }
    
    console.error('\nüîß –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:');
    console.error('1. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ PostgreSQL –∑–∞–ø—É—â–µ–Ω');
    console.error('2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è');
    console.error('3. –°–æ–∑–¥–∞–π—Ç–µ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö rts_decaux_reklama');
    console.error('4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    
  } finally {
    await client.end();
    console.log('\nüîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ');
  }
}

console.log('üß™ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL');
console.log('=====================================');
checkConnection().catch(console.error);
