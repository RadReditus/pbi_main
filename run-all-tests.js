// –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ PostgreSQL
const { exec } = require('child_process');
const path = require('path');

const tests = [
  {
    name: '–ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞',
    file: 'quick-postgres-check.js',
    description: '–ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∏ –¥–∞–Ω–Ω—ã—Ö'
  },
  {
    name: '–ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö',
    file: 'test-postgres-data.js',
    description: '–ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü –∏ –¥–∞–Ω–Ω—ã—Ö'
  },
  {
    name: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü',
    file: 'test-specific-tables.js',
    description: '–ê–Ω–∞–ª–∏–∑ —Ü–µ–ª–µ–≤—ã—Ö —Ç–∞–±–ª–∏—Ü —Å hex ID'
  },
  {
    name: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–æ–≤',
    file: 'test-translation-verification.js',
    description: '–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ –ø–µ—Ä–µ–≤–æ–¥–æ–≤'
  }
];

async function runTest(test) {
  return new Promise((resolve, reject) => {
    console.log(`\nüß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞: ${test.name}`);
    console.log(`üìù –û–ø–∏—Å–∞–Ω–∏–µ: ${test.description}`);
    console.log('='.repeat(60));
    
    const startTime = Date.now();
    
    exec(`node ${test.file}`, (error, stdout, stderr) => {
      const endTime = Date.now();
      const duration = endTime - startTime;
      
      if (error) {
        console.log(`‚ùå –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π: ${error.message}`);
        console.log(`‚è±Ô∏è  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${duration}ms`);
        resolve({ success: false, error: error.message, duration });
        return;
      }
      
      console.log(stdout);
      if (stderr) {
        console.log('‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:');
        console.log(stderr);
      }
      
      console.log(`‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ`);
      console.log(`‚è±Ô∏è  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${duration}ms`);
      resolve({ success: true, duration });
    });
  });
}

async function runAllTests() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ PostgreSQL');
  console.log('================================');
  console.log(`üìÖ –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: ${new Date().toLocaleString()}`);
  
  const results = [];
  const startTime = Date.now();
  
  for (const test of tests) {
    try {
      const result = await runTest(test);
      results.push({ ...test, ...result });
    } catch (error) {
      console.log(`‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ ${test.name}: ${error.message}`);
      results.push({ ...test, success: false, error: error.message, duration: 0 });
    }
  }
  
  const endTime = Date.now();
  const totalDuration = endTime - startTime;
  
  // –°–≤–æ–¥–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
  console.log('\nüìä –°–≤–æ–¥–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
  console.log('===================================');
  
  const successful = results.filter(r => r.success).length;
  const failed = results.filter(r => !r.success).length;
  
  console.log(`‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: ${successful}`);
  console.log(`‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: ${failed}`);
  console.log(`‚è±Ô∏è  –û–±—â–µ–µ –≤—Ä–µ–º—è: ${totalDuration}ms`);
  
  console.log('\nüìã –î–µ—Ç–∞–ª–∏ –ø–æ —Ç–µ—Å—Ç–∞–º:');
  results.forEach((result, index) => {
    const status = result.success ? '‚úÖ' : '‚ùå';
    const duration = result.duration ? `${result.duration}ms` : 'N/A';
    console.log(`${index + 1}. ${status} ${result.name} (${duration})`);
    if (result.error) {
      console.log(`   –û—à–∏–±–∫–∞: ${result.error}`);
    }
  });
  
  // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
  console.log('\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:');
  if (failed === 0) {
    console.log('üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ! –ö–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö –æ—Ç–ª–∏—á–Ω–æ–µ.');
  } else if (failed <= 2) {
    console.log('‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –∏ –∏—Å–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–æ–±–ª–µ–º—ã.');
  } else {
    console.log('‚ùå –ú–Ω–æ–≥–æ —Ç–µ—Å—Ç–æ–≤ –Ω–µ –ø—Ä–æ—à–ª–æ. –¢—Ä–µ–±—É–µ—Ç—Å—è —Å–µ—Ä—å–µ–∑–Ω–∞—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞ —Å–∏—Å—Ç–µ–º—ã.');
  }
  
  console.log('\nüîß –î–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º:');
  console.log('1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL');
  console.log('2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω–∞ –∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞');
  console.log('3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–¥–∏—Ä–æ–≤–∫–∏');
  console.log('4. –û–±–Ω–æ–≤–∏—Ç–µ —Å–ª–æ–≤–∞—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–æ–≤');
  
  console.log(`\nüìÖ –í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: ${new Date().toLocaleString()}`);
}

// –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
runAllTests().catch(console.error);
