// –¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
const { Client } = require('pg');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL
const postgresConfig = {
  host: process.env.PG_HOST || 'localhost',
  port: process.env.PG_PORT || 5432,
  user: process.env.PG_USER || 'postgres',
  password: process.env.PG_PASSWORD || 'password',
  database: 'rts_decaux_reklama',
};

// –ò–∑–≤–µ—Å—Ç–Ω—ã–µ hex ID –∏ –∏—Ö –æ–∂–∏–¥–∞–µ–º—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã
const expectedTranslations = {
  '0x0000021398EDF280': '–†–µ–≥–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
  '0x0000021398EDF281': '–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç',
  '0x0000021398EDF282': '–°–∫–ª–∞–¥',
  '0x0000021398EDF283': '–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞',
  '0x0000021398EDF284': '–î–æ–≥–æ–≤–æ—Ä',
  '0x0000021398EDF285': '–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è',
  '0x0000021398EDF286': '–ï–¥–∏–Ω–∏—Ü–∞–ò–∑–º–µ—Ä–µ–Ω–∏—è',
  '0x0000021398EDF287': '–ì—Ä—É–ø–ø–∞–¢–æ–≤–∞—Ä–æ–≤',
  '0x0000021398EDF288': '–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π',
  '0x0000021398EDF289': '–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ',
  '0x0000021398EDF28A': '–í–∏–¥–û–ø–µ—Ä–∞—Ü–∏–∏',
};

// –ò–∑–≤–µ—Å—Ç–Ω—ã–µ –∫–∞—Ä–∞–∫—É–ª–∏ –∏ –∏—Ö –æ–∂–∏–¥–∞–µ–º—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
const expectedGarbledFixes = {
  '¬°Yn6 √¨√ß b!!': '–†–µ–≥–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
  '√¨√ß b!!': '–†–µ–≥–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
  'Yn6 √¨√ß': '–†–µ–≥–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
  'b!!': '–†–µ–≥–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
};

async function testTranslationVerification() {
  const client = new Client(postgresConfig);
  
  try {
    console.log('üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL...');
    await client.connect();
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!');
    
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–≤–æ–¥—ã hex ID
    console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–æ–≤ hex ID:');
    console.log('=============================');
    
    let totalHexIds = 0;
    let translatedHexIds = 0;
    let untranslatedHexIds = 0;
    
    for (const [hexId, expectedTranslation] of Object.entries(expectedTranslations)) {
      console.log(`\nüîç –ü–æ–∏—Å–∫ hex ID: ${hexId}`);
      
      try {
        // –ò—â–µ–º —ç—Ç–æ—Ç hex ID –≤–æ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü–∞—Ö
        const searchResult = await client.query(`
          SELECT 
            table_name,
            column_name,
            value,
            COUNT(*) as count
          FROM (
            SELECT 
              'table1' as table_name,
              'column1' as column_name,
              'value1' as value
            FROM information_schema.tables 
            WHERE table_schema = 'public'
          ) t
          WHERE value LIKE '%${hexId}%'
          GROUP BY table_name, column_name, value
        `);
        
        // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π SQL
        const tablesResult = await client.query(`
          SELECT table_name 
          FROM information_schema.tables 
          WHERE table_schema = 'public' 
          AND table_type = 'BASE TABLE'
        `);
        
        let foundInTables = [];
        
        for (const table of tablesResult.rows) {
          try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é —Ç–∞–±–ª–∏—Ü—É –Ω–∞ –Ω–∞–ª–∏—á–∏–µ hex ID
            const dataResult = await client.query(`
              SELECT * FROM "${table.table_name}" 
              WHERE EXISTS (
                SELECT 1 FROM (
                  SELECT * FROM "${table.table_name}" LIMIT 100
                ) t
                WHERE t::text LIKE '%${hexId}%'
              )
              LIMIT 5
            `);
            
            if (dataResult.rows.length > 0) {
              foundInTables.push(table.table_name);
              
              // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
              dataResult.rows.forEach(row => {
                Object.entries(row).forEach(([key, value]) => {
                  if (typeof value === 'string' && value.includes(hexId)) {
                    totalHexIds++;
                    
                    if (value === expectedTranslation) {
                      translatedHexIds++;
                      console.log(`  ‚úÖ –ù–∞–π–¥–µ–Ω –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–π: ${value} –≤ ${table.table_name}.${key}`);
                    } else if (value.includes(hexId)) {
                      untranslatedHexIds++;
                      console.log(`  ‚ùå –ù–∞–π–¥–µ–Ω –Ω–µ–ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–π: ${value} –≤ ${table.table_name}.${key}`);
                    }
                  }
                });
              });
            }
          } catch (error) {
            // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–æ–∏—Å–∫–∞ –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ
          }
        }
        
        if (foundInTables.length > 0) {
          console.log(`  üìä –ù–∞–π–¥–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü–∞—Ö: ${foundInTables.join(', ')}`);
        } else {
          console.log(`  üì≠ –ù–µ –Ω–∞–π–¥–µ–Ω –≤ –¥–∞–Ω–Ω—ã—Ö`);
        }
        
      } catch (error) {
        console.log(`  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: ${error.message}`);
      }
    }
    
    console.log(`\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ hex ID:`);
    console.log(`  –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ: ${totalHexIds}`);
    console.log(`  –ü–µ—Ä–µ–≤–µ–¥–µ–Ω–æ: ${translatedHexIds}`);
    console.log(`  –ù–µ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–æ: ${untranslatedHexIds}`);
    console.log(`  –ü—Ä–æ—Ü–µ–Ω—Ç –ø–µ—Ä–µ–≤–æ–¥–∞: ${totalHexIds > 0 ? Math.round(translatedHexIds / totalHexIds * 100) : 0}%`);
    
    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ä–∞–∫—É–ª–µ–π
    console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –∫–∞—Ä–∞–∫—É–ª–µ–π:');
    console.log('===================================');
    
    let totalGarbled = 0;
    let fixedGarbled = 0;
    let unfixedGarbled = 0;
    
    for (const [garbled, expectedFix] of Object.entries(expectedGarbledFixes)) {
      console.log(`\nüîç –ü–æ–∏—Å–∫ –∫–∞—Ä–∞–∫—É–ª–µ–π: ${garbled}`);
      
      try {
        const tablesResult = await client.query(`
          SELECT table_name 
          FROM information_schema.tables 
          WHERE table_schema = 'public' 
          AND table_type = 'BASE TABLE'
        `);
        
        let foundInTables = [];
        
        for (const table of tablesResult.rows) {
          try {
            const dataResult = await client.query(`
              SELECT * FROM "${table.table_name}" 
              WHERE EXISTS (
                SELECT 1 FROM (
                  SELECT * FROM "${table.table_name}" LIMIT 100
                ) t
                WHERE t::text LIKE '%${garbled}%'
              )
              LIMIT 5
            `);
            
            if (dataResult.rows.length > 0) {
              foundInTables.push(table.table_name);
              
              dataResult.rows.forEach(row => {
                Object.entries(row).forEach(([key, value]) => {
                  if (typeof value === 'string' && value.includes(garbled)) {
                    totalGarbled++;
                    
                    if (value === expectedFix) {
                      fixedGarbled++;
                      console.log(`  ‚úÖ –ù–∞–π–¥–µ–Ω –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π: ${value} –≤ ${table.table_name}.${key}`);
                    } else if (value.includes(garbled)) {
                      unfixedGarbled++;
                      console.log(`  ‚ùå –ù–∞–π–¥–µ–Ω –Ω–µ–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π: ${value} –≤ ${table.table_name}.${key}`);
                    }
                  }
                });
              });
            }
          } catch (error) {
            // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–æ–∏—Å–∫–∞
          }
        }
        
        if (foundInTables.length > 0) {
          console.log(`  üìä –ù–∞–π–¥–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü–∞—Ö: ${foundInTables.join(', ')}`);
        } else {
          console.log(`  üì≠ –ù–µ –Ω–∞–π–¥–µ–Ω –≤ –¥–∞–Ω–Ω—ã—Ö`);
        }
        
      } catch (error) {
        console.log(`  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: ${error.message}`);
      }
    }
    
    console.log(`\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞—Ä–∞–∫—É–ª–µ–π:`);
    console.log(`  –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ: ${totalGarbled}`);
    console.log(`  –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: ${fixedGarbled}`);
    console.log(`  –ù–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: ${unfixedGarbled}`);
    console.log(`  –ü—Ä–æ—Ü–µ–Ω—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è: ${totalGarbled > 0 ? Math.round(fixedGarbled / totalGarbled * 100) : 0}%`);
    
    // 3. –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –ø–µ—Ä–µ–≤–æ–¥–æ–≤
    console.log('\nüìà –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –ø–µ—Ä–µ–≤–æ–¥–æ–≤:');
    console.log('===================================');
    
    const totalIssues = totalHexIds + totalGarbled;
    const totalFixed = translatedHexIds + fixedGarbled;
    const qualityScore = totalIssues > 0 ? Math.round(totalFixed / totalIssues * 100) : 100;
    
    console.log(`  –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–±–ª–µ–º: ${totalIssues}`);
    console.log(`  –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: ${totalFixed}`);
    console.log(`  –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞: ${qualityScore}%`);
    
    if (qualityScore >= 90) {
      console.log(`  üéâ –û—Ç–ª–∏—á–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ–≤–æ–¥–æ–≤!`);
    } else if (qualityScore >= 70) {
      console.log(`  ‚úÖ –•–æ—Ä–æ—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ–≤–æ–¥–æ–≤`);
    } else if (qualityScore >= 50) {
      console.log(`  ‚ö†Ô∏è  –£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ–≤–æ–¥–æ–≤`);
    } else {
      console.log(`  ‚ùå –ù–∏–∑–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ–≤–æ–¥–æ–≤, —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞`);
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error);
  } finally {
    await client.end();
    console.log('\nüîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å PostgreSQL –∑–∞–∫—Ä—ã—Ç–æ');
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –≤ PostgreSQL');
console.log('================================================');
testTranslationVerification().catch(console.error);
