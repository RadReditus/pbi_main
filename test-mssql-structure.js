const sql = require('mssql');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MSSQL
const config = {
    server: 'localhost', // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Å–µ—Ä–≤–µ—Ä
    database: 'your_database', // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à—É –±–∞–∑—É
    user: 'your_username', // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    password: 'your_password', // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à –ø–∞—Ä–æ–ª—å
    options: {
        encrypt: false, // –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ true –¥–ª—è Azure
        trustServerCertificate: true
    }
};

async function analyzeMssqlStructure() {
    try {
        console.log('üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MSSQL –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
        await sql.connect(config);
        console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!');

        // 1. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü
        console.log('\nüìã –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü...');
        const tablesResult = await sql.query(`
            SELECT 
                TABLE_NAME,
                TABLE_TYPE
            FROM INFORMATION_SCHEMA.TABLES 
            WHERE TABLE_SCHEMA = 'dbo'
            ORDER BY TABLE_NAME
        `);
        
        console.log(`–ù–∞–π–¥–µ–Ω–æ —Ç–∞–±–ª–∏—Ü: ${tablesResult.recordset.length}`);
        console.log('–ü–µ—Ä–≤—ã–µ 20 —Ç–∞–±–ª–∏—Ü:');
        tablesResult.recordset.slice(0, 20).forEach(table => {
            console.log(`  - ${table.TABLE_NAME} (${table.TABLE_TYPE})`);
        });

        // 2. –ü–æ–∏—Å–∫ —Ç–∞–±–ª–∏—Ü –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
        console.log('\nüîç –ü–æ–∏—Å–∫ —Ç–∞–±–ª–∏—Ü –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö...');
        const metadataResult = await sql.query(`
            SELECT 
                TABLE_NAME,
                COLUMN_NAME,
                DATA_TYPE
            FROM INFORMATION_SCHEMA.COLUMNS 
            WHERE TABLE_SCHEMA = 'dbo'
                AND (TABLE_NAME LIKE '%Metadata%' 
                     OR TABLE_NAME LIKE '%Config%'
                     OR TABLE_NAME LIKE '%Schema%'
                     OR TABLE_NAME LIKE '%Field%'
                     OR TABLE_NAME LIKE '%Object%')
            ORDER BY TABLE_NAME, ORDINAL_POSITION
        `);
        
        if (metadataResult.recordset.length > 0) {
            console.log('–ù–∞–π–¥–µ–Ω—ã —Ç–∞–±–ª–∏—Ü—ã –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö:');
            metadataResult.recordset.forEach(table => {
                console.log(`  - ${table.TABLE_NAME}.${table.COLUMN_NAME} (${table.DATA_TYPE})`);
            });
        } else {
            console.log('–¢–∞–±–ª–∏—Ü—ã –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –ø–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º –Ω–∞–∑–≤–∞–Ω–∏—è–º');
        }

        // 3. –ê–Ω–∞–ª–∏–∑ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤
        console.log('\nüìö –ê–Ω–∞–ª–∏–∑ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤...');
        const referenceTables = tablesResult.recordset
            .filter(table => table.TABLE_NAME.startsWith('_Reference'))
            .slice(0, 5); // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 5 —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤

        for (const table of referenceTables) {
            console.log(`\n--- –ê–Ω–∞–ª–∏–∑ —Ç–∞–±–ª–∏—Ü—ã ${table.TABLE_NAME} ---`);
            
            try {
                // –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã
                const structureResult = await sql.query(`
                    SELECT 
                        COLUMN_NAME,
                        DATA_TYPE,
                        IS_NULLABLE,
                        CHARACTER_MAXIMUM_LENGTH
                    FROM INFORMATION_SCHEMA.COLUMNS 
                    WHERE TABLE_SCHEMA = 'dbo' 
                        AND TABLE_NAME = '${table.TABLE_NAME}'
                    ORDER BY ORDINAL_POSITION
                `);
                
                console.log('–°—Ç—Ä—É–∫—Ç—É—Ä–∞:');
                structureResult.recordset.forEach(col => {
                    console.log(`  - ${col.COLUMN_NAME}: ${col.DATA_TYPE}${col.CHARACTER_MAXIMUM_LENGTH ? `(${col.CHARACTER_MAXIMUM_LENGTH})` : ''} ${col.IS_NULLABLE === 'YES' ? 'NULL' : 'NOT NULL'}`);
                });

                // –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 –∑–∞–ø–∏—Å–∏
                const dataResult = await sql.query(`
                    SELECT TOP 3 * FROM dbo.${table.TABLE_NAME}
                `);
                
                console.log(`–î–∞–Ω–Ω—ã–µ (${dataResult.recordset.length} –∑–∞–ø–∏—Å–µ–π):`);
                dataResult.recordset.forEach((record, index) => {
                    console.log(`  –ó–∞–ø–∏—Å—å ${index + 1}:`);
                    Object.keys(record).forEach(key => {
                        const value = record[key];
                        if (value !== null && value !== undefined) {
                            if (Buffer.isBuffer(value)) {
                                console.log(`    ${key}: [BINARY DATA]`);
                            } else if (typeof value === 'string' && value.length > 100) {
                                console.log(`    ${key}: "${value.substring(0, 100)}..."`);
                            } else {
                                console.log(`    ${key}: ${value}`);
                            }
                        }
                    });
                });
            } catch (error) {
                console.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ ${table.TABLE_NAME}: ${error.message}`);
            }
        }

        // 4. –ê–Ω–∞–ª–∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        console.log('\nüìÑ –ê–Ω–∞–ª–∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤...');
        const documentTables = tablesResult.recordset
            .filter(table => table.TABLE_NAME.startsWith('_Document'))
            .slice(0, 3); // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 3 –¥–æ–∫—É–º–µ–Ω—Ç–∞

        for (const table of documentTables) {
            console.log(`\n--- –ê–Ω–∞–ª–∏–∑ —Ç–∞–±–ª–∏—Ü—ã ${table.TABLE_NAME} ---`);
            
            try {
                // –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã
                const structureResult = await sql.query(`
                    SELECT 
                        COLUMN_NAME,
                        DATA_TYPE,
                        IS_NULLABLE,
                        CHARACTER_MAXIMUM_LENGTH
                    FROM INFORMATION_SCHEMA.COLUMNS 
                    WHERE TABLE_SCHEMA = 'dbo' 
                        AND TABLE_NAME = '${table.TABLE_NAME}'
                    ORDER BY ORDINAL_POSITION
                `);
                
                console.log('–°—Ç—Ä—É–∫—Ç—É—Ä–∞:');
                structureResult.recordset.forEach(col => {
                    console.log(`  - ${col.COLUMN_NAME}: ${col.DATA_TYPE}${col.CHARACTER_MAXIMUM_LENGTH ? `(${col.CHARACTER_MAXIMUM_LENGTH})` : ''} ${col.IS_NULLABLE === 'YES' ? 'NULL' : 'NOT NULL'}`);
                });

                // –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–µ 2 –∑–∞–ø–∏—Å–∏
                const dataResult = await sql.query(`
                    SELECT TOP 2 * FROM dbo.${table.TABLE_NAME}
                `);
                
                console.log(`–î–∞–Ω–Ω—ã–µ (${dataResult.recordset.length} –∑–∞–ø–∏—Å–µ–π):`);
                dataResult.recordset.forEach((record, index) => {
                    console.log(`  –ó–∞–ø–∏—Å—å ${index + 1}:`);
                    Object.keys(record).forEach(key => {
                        const value = record[key];
                        if (value !== null && value !== undefined) {
                            if (Buffer.isBuffer(value)) {
                                console.log(`    ${key}: [BINARY DATA]`);
                            } else if (typeof value === 'string' && value.length > 100) {
                                console.log(`    ${key}: "${value.substring(0, 100)}..."`);
                            } else {
                                console.log(`    ${key}: ${value}`);
                            }
                        }
                    });
                });
            } catch (error) {
                console.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ ${table.TABLE_NAME}: ${error.message}`);
            }
        }

        // 5. –ü–æ–∏—Å–∫ —Ç–∞–±–ª–∏—Ü —Å –æ–ø–∏—Å–∞–Ω–∏—è–º–∏
        console.log('\nüîç –ü–æ–∏—Å–∫ —Ç–∞–±–ª–∏—Ü —Å –æ–ø–∏—Å–∞–Ω–∏—è–º–∏ –ø–æ–ª–µ–π...');
        const descriptionResult = await sql.query(`
            SELECT 
                TABLE_NAME,
                COUNT(*) as COLUMN_COUNT
            FROM INFORMATION_SCHEMA.COLUMNS 
            WHERE TABLE_SCHEMA = 'dbo'
                AND (COLUMN_NAME LIKE '%Name%' 
                     OR COLUMN_NAME LIKE '%Description%'
                     OR COLUMN_NAME LIKE '%Title%'
                     OR COLUMN_NAME LIKE '%Code%')
            GROUP BY TABLE_NAME
            ORDER BY COLUMN_COUNT DESC
        `);
        
        console.log('–¢–∞–±–ª–∏—Ü—ã —Å –æ–ø–∏—Å–∞—Ç–µ–ª—å–Ω—ã–º–∏ –ø–æ–ª—è–º–∏:');
        descriptionResult.recordset.slice(0, 10).forEach(table => {
            console.log(`  - ${table.TABLE_NAME}: ${table.COLUMN_COUNT} –æ–ø–∏—Å–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π`);
        });

        // 6. –ê–Ω–∞–ª–∏–∑ –ø–æ–ª–µ–π _Fld*
        console.log('\nüîß –ê–Ω–∞–ª–∏–∑ –ø–æ–ª–µ–π _Fld*...');
        const fldResult = await sql.query(`
            SELECT 
                TABLE_NAME,
                COUNT(*) as FLD_COUNT
            FROM INFORMATION_SCHEMA.COLUMNS 
            WHERE TABLE_SCHEMA = 'dbo'
                AND COLUMN_NAME LIKE '_Fld%'
            GROUP BY TABLE_NAME
            ORDER BY FLD_COUNT DESC
        `);
        
        console.log('–¢–∞–±–ª–∏—Ü—ã —Å –ø–æ–ª—è–º–∏ _Fld*:');
        fldResult.recordset.slice(0, 10).forEach(table => {
            console.log(`  - ${table.TABLE_NAME}: ${table.FLD_COUNT} –ø–æ–ª–µ–π _Fld*`);
        });

        console.log('\n‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!');

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ:', error.message);
    } finally {
        await sql.close();
        console.log('üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ');
    }
}

// –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞
if (require.main === module) {
    analyzeMssqlStructure().catch(console.error);
}

module.exports = { analyzeMssqlStructure };
