// –¢–µ—Å—Ç –¥–∞–Ω–Ω—ã—Ö –≤ PostgreSQL –ø–æ—Å–ª–µ –∑–∞–ø–∏—Å–∏
const { Client } = require('pg');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL
const postgresConfig = {
  host: process.env.PG_HOST || 'localhost',
  port: process.env.PG_PORT || 5432,
  user: process.env.PG_USER || 'postgres',
  password: process.env.PG_PASSWORD || 'password',
  database: 'rts_decaux_reklama', // –ù–∞—à–∞ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
};

async function testPostgresData() {
  const client = new Client(postgresConfig);
  
  try {
    console.log('üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL...');
    await client.connect();
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!');
    
    // 1. –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü
    console.log('\nüìã –°–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:');
    console.log('================================');
    
    const tablesResult = await client.query(`
      SELECT table_name, table_comment
      FROM information_schema.tables 
      WHERE table_schema = 'public' 
      AND table_type = 'BASE TABLE'
      ORDER BY table_name
    `);
    
    console.log(`–ù–∞–π–¥–µ–Ω–æ —Ç–∞–±–ª–∏—Ü: ${tablesResult.rows.length}`);
    tablesResult.rows.forEach((table, index) => {
      console.log(`${index + 1}. ${table.table_name} - ${table.table_comment || '–ë–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è'}`);
    });
    
    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–∞–∂–¥–æ–π —Ç–∞–±–ª–∏—Ü—ã
    console.log('\nüèóÔ∏è –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü:');
    console.log('=====================');
    
    for (const table of tablesResult.rows.slice(0, 5)) { // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–µ 5 —Ç–∞–±–ª–∏—Ü
      console.log(`\nüìä –¢–∞–±–ª–∏—Ü–∞: ${table.table_name}`);
      console.log('-'.repeat(50));
      
      const columnsResult = await client.query(`
        SELECT 
          column_name,
          data_type,
          is_nullable,
          column_comment
        FROM information_schema.columns 
        WHERE table_name = '${table.table_name}'
        ORDER BY ordinal_position
      `);
      
      columnsResult.rows.forEach(col => {
        console.log(`  ${col.column_name} (${col.data_type}) - ${col.column_comment || '–ë–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è'}`);
      });
    }
    
    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü–∞—Ö
    console.log('\nüìä –î–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü–∞—Ö:');
    console.log('=====================');
    
    for (const table of tablesResult.rows.slice(0, 3)) { // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–µ 3 —Ç–∞–±–ª–∏—Ü—ã
      console.log(`\nüîç –¢–∞–±–ª–∏—Ü–∞: ${table.table_name}`);
      console.log('-'.repeat(50));
      
      try {
        // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
        const countResult = await client.query(`SELECT COUNT(*) as count FROM "${table.table_name}"`);
        const recordCount = countResult.rows[0].count;
        console.log(`  –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: ${recordCount}`);
        
        if (recordCount > 0) {
          // –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 –∑–∞–ø–∏—Å–∏
          const dataResult = await client.query(`SELECT * FROM "${table.table_name}" LIMIT 3`);
          
          console.log('  –ü–µ—Ä–≤—ã–µ –∑–∞–ø–∏—Å–∏:');
          dataResult.rows.forEach((row, index) => {
            console.log(`    –ó–∞–ø–∏—Å—å ${index + 1}:`);
            Object.entries(row).forEach(([key, value]) => {
              // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ hex ID –∏–ª–∏ –∫–∏—Ä–∏–ª–ª–∏—Ü—É
              const isHexId = /^0x[0-9A-Fa-f]{16}$/.test(value);
              const hasCyrillic = /[–∞-—è—ë]/i.test(value);
              const isGarbled = /[¬°¬ø]|Yn6|√¨√ß|b!!/.test(value);
              
              let status = '';
              if (isHexId) status = 'üî¢ HEX ID';
              else if (hasCyrillic) status = '‚úÖ –ö–∏—Ä–∏–ª–ª–∏—Ü–∞';
              else if (isGarbled) status = '‚ùå –ö–∞—Ä–∞–∫—É–ª–∏';
              else status = 'üìù –û–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç';
              
              console.log(`      ${key}: ${value} ${status}`);
            });
          });
        }
      } catch (error) {
        console.log(`  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: ${error.message}`);
      }
    }
    
    // 4. –ü–æ–∏—Å–∫ hex ID –≤ –¥–∞–Ω–Ω—ã—Ö
    console.log('\nüîç –ü–æ–∏—Å–∫ hex ID –≤ –¥–∞–Ω–Ω—ã—Ö:');
    console.log('=========================');
    
    const hexIdPattern = /0x[0-9A-Fa-f]{16}/;
    let totalHexIds = 0;
    let translatedHexIds = 0;
    
    for (const table of tablesResult.rows.slice(0, 5)) {
      try {
        const dataResult = await client.query(`SELECT * FROM "${table.table_name}" LIMIT 100`);
        
        dataResult.rows.forEach(row => {
          Object.values(row).forEach(value => {
            if (typeof value === 'string' && hexIdPattern.test(value)) {
              totalHexIds++;
              console.log(`  –ù–∞–π–¥–µ–Ω hex ID: ${value} –≤ —Ç–∞–±–ª–∏—Ü–µ ${table.table_name}`);
              
              // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–µ—Ä–µ–≤–µ–¥–µ–Ω –ª–∏ –æ–Ω
              if (/[–∞-—è—ë]/i.test(value)) {
                translatedHexIds++;
                console.log(`    ‚úÖ –ü–µ—Ä–µ–≤–µ–¥–µ–Ω –≤: ${value}`);
              } else {
                console.log(`    ‚ùå –ù–µ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω`);
              }
            }
          });
        });
      } catch (error) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —á—Ç–µ–Ω–∏—è
      }
    }
    
    console.log(`\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ hex ID:`);
    console.log(`  –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ: ${totalHexIds}`);
    console.log(`  –ü–µ—Ä–µ–≤–µ–¥–µ–Ω–æ: ${translatedHexIds}`);
    console.log(`  –ù–µ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–æ: ${totalHexIds - translatedHexIds}`);
    
    // 5. –ü–æ–∏—Å–∫ –∫–∞—Ä–∞–∫—É–ª–µ–π –∫–∏—Ä–∏–ª–ª–∏—Ü—ã
    console.log('\nüîç –ü–æ–∏—Å–∫ –∫–∞—Ä–∞–∫—É–ª–µ–π –∫–∏—Ä–∏–ª–ª–∏—Ü—ã:');
    console.log('=============================');
    
    const garbledPattern = /[¬°¬ø]|Yn6|√¨√ß|b!!/;
    let totalGarbled = 0;
    let fixedGarbled = 0;
    
    for (const table of tablesResult.rows.slice(0, 5)) {
      try {
        const dataResult = await client.query(`SELECT * FROM "${table.table_name}" LIMIT 100`);
        
        dataResult.rows.forEach(row => {
          Object.values(row).forEach(value => {
            if (typeof value === 'string' && garbledPattern.test(value)) {
              totalGarbled++;
              console.log(`  –ù–∞–π–¥–µ–Ω—ã –∫–∞—Ä–∞–∫—É–ª–∏: ${value} –≤ —Ç–∞–±–ª–∏—Ü–µ ${table.table_name}`);
              
              // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã –ª–∏ –æ–Ω–∏
              if (/[–∞-—è—ë]/i.test(value) && !garbledPattern.test(value)) {
                fixedGarbled++;
                console.log(`    ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω—ã –≤: ${value}`);
              } else {
                console.log(`    ‚ùå –ù–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã`);
              }
            }
          });
        });
      } catch (error) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —á—Ç–µ–Ω–∏—è
      }
    }
    
    console.log(`\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞—Ä–∞–∫—É–ª–µ–π:`);
    console.log(`  –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ: ${totalGarbled}`);
    console.log(`  –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: ${fixedGarbled}`);
    console.log(`  –ù–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: ${totalGarbled - fixedGarbled}`);
    
    // 6. –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    console.log('\nüìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:');
    console.log('=================================');
    
    const totalTables = tablesResult.rows.length;
    let totalRecords = 0;
    
    for (const table of tablesResult.rows) {
      try {
        const countResult = await client.query(`SELECT COUNT(*) as count FROM "${table.table_name}"`);
        totalRecords += parseInt(countResult.rows[0].count);
      } catch (error) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏
      }
    }
    
    console.log(`  –í—Å–µ–≥–æ —Ç–∞–±–ª–∏—Ü: ${totalTables}`);
    console.log(`  –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: ${totalRecords}`);
    console.log(`  –°—Ä–µ–¥–Ω–µ–µ –∑–∞–ø–∏—Å–µ–π –Ω–∞ —Ç–∞–±–ª–∏—Ü—É: ${Math.round(totalRecords / totalTables)}`);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ PostgreSQL:', error);
  } finally {
    await client.end();
    console.log('\nüîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å PostgreSQL –∑–∞–∫—Ä—ã—Ç–æ');
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ PostgreSQL');
console.log('=====================================');
testPostgresData().catch(console.error);
